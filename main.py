import paho.mqtt.client as mqtt
from fastapi import FastAPI, WebSocket
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
import json
import asyncio
from collections import deque
from starlette.requests import Request
import joblib
import numpy as np
import torch
import torch.nn as nn
import requests
# C·∫•u h√¨nh MQTT
BROKER = "1df19fa858774630a1197a48081cc0c1.s1.eu.hivemq.cloud"
PORT = 8883
TOPIC = "Livingroom/device_1"
USERNAME = "chechanh2003"
PASSWORD = "0576289825Asd"

# H√†ng ƒë·ª£i l∆∞u tr·ªØ d·ªØ li·ªáu m·ªõi nh·∫•t
data_queue = deque(maxlen=1)
COZE_URL = 'https://api.coze.com/open_api/v2/chat'
token = 'pat_GojthSW0XTyNqKlxxuahD7LLLvP1NUIccWDzQ49DN3ZUaxqgsKI4jn1k0m4WKrMh'
COZE_HEADERS = {
    'Authorization': f'Bearer {token}',
    'Content-Type': 'application/json',
    'Connection': 'keep-alive',
    'Accept': '*/*',
}

app = FastAPI()
templates = Jinja2Templates(directory="templates")

class Autoencoder(nn.Module):
    def __init__(self):
        super(Autoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(5, 2),  # Ph·∫£i gi·ªØ nguy√™n s·ªë neuron nh∆∞ model c≈©
            nn.ReLU()
        )
        self.decoder = nn.Sequential(
            nn.Linear(2, 5),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x

# Kh·ªüi t·∫°o model m·ªõi v·ªõi ƒë√∫ng ki·∫øn tr√∫c c≈©
model = Autoencoder()

# Load l·∫°i model v·ªõi weights_only=True (c√°ch an to√†n)
model.load_state_dict(torch.load("model_5.pth", weights_only=True))

# ƒê·∫∑t model ·ªü ch·∫ø ƒë·ªô ƒë√°nh gi√°
model.eval()

# Load scaler
scaler = joblib.load("scaler_5.pkl")

threshold = 1.4658211469650269

# H√†m d·ª± ƒëo√°n v√† ph√¢n t√≠ch ƒë∆°n gi·∫£n (c√≥ th·ªÉ t√πy ch·ªânh)
def predict_data(data):
    new_data = np.array([data])  # V√≠ d·ª•: [nhi·ªát ƒë·ªô, SpO2, nh·ªãp tim, huy·∫øt √°p, ...]

    # 1. Chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi
    new_data_scaled = scaler.transform(new_data)  # S·ª≠ d·ª•ng c√πng b·ªô scaler ƒë√£ hu·∫•n luy·ªán

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh tensor PyTorch
    new_data_scaled = torch.tensor(new_data_scaled, dtype=torch.float32)

    # 2. T√≠nh sai s·ªë t√°i t·∫°o
    model.eval()  # ƒê·∫∑t m√¥ h√¨nh v√†o ch·∫ø ƒë·ªô ƒë√°nh gi√°
    with torch.no_grad():
        reconstruction = model(new_data_scaled)  # T√°i t·∫°o d·ªØ li·ªáu
        mse = torch.mean((new_data_scaled - reconstruction) ** 2).item()  # T√≠nh sai s·ªë t√°i t·∫°o t·ªïng th·ªÉ
        feature_wise_mse = torch.mean((new_data_scaled - reconstruction) ** 2, dim=0).numpy()  # T√≠nh sai s·ªë cho t·ª´ng ƒë·∫∑c tr∆∞ng

    # 3. So s√°nh v·ªõi ng∆∞·ª°ng v√† ph√¢n lo·∫°i
    if mse > threshold:
        prediction = f"D·ªØ li·ªáu m·ªõi l√† BAD (b·∫•t th∆∞·ªùng). Sai s·ªë t√°i t·∫°o: {mse:.4f}"
    else:
        prediction = f"D·ªØ li·ªáu m·ªõi l√† GOOD (t·ªët). Sai s·ªë t√°i t·∫°o: {mse:.4f}"

    return prediction
def analysis_data(content):
    data = json.dumps({
        "conversation_id": "demo-0",
        "bot_id": "7476437008655876114",
        "user": "demo-user",
        "query": content,
        "stream": False
    })

    resp = requests.post(COZE_URL, data=data, headers=COZE_HEADERS)
    return resp.json()['messages'][0]['content']
# MQTT callbacks
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Connected to MQTT Broker!")
        client.subscribe(TOPIC)
    else:
        print(f"‚ö†Ô∏è Failed to connect, return code {rc}")

def on_message(client, userdata, msg):
    data = msg.payload.decode()
    parts = data.split('&')
    
    health_data = {"temp": 0, "spo2": 0, "hr": 0, "sys": 0, "dia": 0}
    for part in parts:
        if '=' in part:
            key, value = part.split('=')
            if key == "SpO2":
                health_data["spo2"] = int(value)
            elif key == "HR":
                health_data["hr"] = int(value)
            elif key == "Temp":
                health_data["temp"] = float(value)
            elif key == "BP":
                health_data["sys"], health_data["dia"] = map(int, value.split('/'))
    
    # Th√™m d·ª± ƒëo√°n v√† ph√¢n t√≠ch
    input = [health_data["spo2"],health_data["hr"],health_data["temp"],health_data["sys"], health_data["dia"]]
    content = f"Nhi·ªát ƒë·ªô c∆° th·ªÉ: {health_data["temp"]}¬∞C; Nh·ªãp tim: {health_data["hr"]} bpm; SpO2: {health_data["spo2"]}%; Huy·∫øt √°p: {health_data["sys"]}/{health_data["dia"]} mmHg"
    print('HELLO')
    print(input)
    prediction = predict_data(input)
    print(prediction)
    analysis = "ƒêang ph√¢n t√≠ch..."
    health_data["prediction"] = prediction
    health_data["analysis"] = analysis
    data_queue.append(health_data)

    analysis = analysis_data(content)
    health_data["analysis"] = analysis
    data_queue.append(health_data)


# Kh·ªüi t·∫°o MQTT Client
client = mqtt.Client()
client.username_pw_set(USERNAME, PASSWORD)
client.tls_set()
client.on_connect = on_connect
client.on_message = on_message

# K·∫øt n·ªëi MQTT
print("üîÑ Connecting to broker...")
client.connect(BROKER, PORT, 60)
client.loop_start()

# FastAPI routes
@app.get("/", response_class=HTMLResponse)
async def get(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            if data_queue:
                print('ƒë√£ v√†o')
                latest_data = data_queue[-1]
                print(f"üîÑ Sending data: {latest_data}")  # Debug
                await websocket.send_text(json.dumps(latest_data))
            await asyncio.sleep(1)
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        await websocket.close()

# D·ª´ng MQTT khi ·ª©ng d·ª•ng t·∫Øt
@app.on_event("shutdown")
def shutdown_event():
    client.loop_stop()
    client.disconnect()